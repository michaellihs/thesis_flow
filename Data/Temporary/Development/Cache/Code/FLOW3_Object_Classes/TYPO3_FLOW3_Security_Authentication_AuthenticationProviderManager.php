<?php
namespace TYPO3\FLOW3\Security\Authentication;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\FLOW3\Annotations as FLOW3;

/**
 * The default authentication manager, which relies on Authentication Providers
 * to authenticate the tokens stored in the security context.
 * @\TYPO3\FLOW3\Annotations\Scope("singleton")
 */
class AuthenticationProviderManager extends AuthenticationProviderManager_Original implements \TYPO3\FLOW3\Object\Proxy\ProxyInterface {

	private $FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices = array();

	private $FLOW3_Aop_Proxy_groupedAdviceChains = array();

	private $FLOW3_Aop_Proxy_methodIsInAdviceMode = array();


	/**
	 * Autogenerated Proxy Method
	 * @param \TYPO3\FLOW3\Security\Authentication\AuthenticationProviderResolver $providerResolver The provider resolver
	 * @param \TYPO3\FLOW3\Security\RequestPatternResolver $requestPatternResolver The request pattern resolver
	 */
	public function __construct() {
		$arguments = func_get_args();

		$this->FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray();
		if (get_class($this) === 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', $this);
		if (get_class($this) === 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Authentication\AuthenticationManagerInterface', $this);

		if (!isset($arguments[0])) $arguments[0] = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderResolver');
		if (!isset($arguments[1])) $arguments[1] = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Security\RequestPatternResolver');
		if (!isset($arguments[0])) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException('Missing required constructor argument $providerResolver in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
		if (!isset($arguments[1])) throw new \TYPO3\FLOW3\Object\Exception\UnresolvedDependenciesException('Missing required constructor argument $requestPatternResolver in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
		call_user_func_array('parent::__construct', $arguments);
		$this->FLOW3_Proxy_injectProperties();
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 protected function FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray() {
		if (method_exists(get_parent_class($this), 'FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray')) parent::FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray();

		$objectManager = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager;
		$this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices = array(
			'authenticate' => array(
				'TYPO3\FLOW3\Aop\Advice\AfterAdvice' => array(
					new \TYPO3\FLOW3\Aop\Advice\AfterAdvice('TYPO3\FLOW3\Security\Aspect\LoggingAspect', 'logManagerAuthenticate', $objectManager, NULL),
				),
			),
			'logout' => array(
				'TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice' => array(
					new \TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice('TYPO3\FLOW3\Security\Aspect\LoggingAspect', 'logManagerLogout', $objectManager, NULL),
				),
			),
			'emitAuthenticatedToken' => array(
				'TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice' => array(
					new \TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice('TYPO3\FLOW3\SignalSlot\SignalAspect', 'forwardSignalToDispatcher', $objectManager, NULL),
				),
			),
			'emitLoggedOut' => array(
				'TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice' => array(
					new \TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice('TYPO3\FLOW3\SignalSlot\SignalAspect', 'forwardSignalToDispatcher', $objectManager, NULL),
				),
			),
		);
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

		$this->FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray();
		if (get_class($this) === 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', $this);
		if (get_class($this) === 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager') \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\FLOW3\Security\Authentication\AuthenticationManagerInterface', $this);

	if (property_exists($this, 'FLOW3_Persistence_RelatedEntities') && is_array($this->FLOW3_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface');
		foreach ($this->FLOW3_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\FLOW3\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->FLOW3_Persistence_RelatedEntities);
	}
				$this->FLOW3_Proxy_injectProperties();
		$result = NULL;
		if (method_exists(get_parent_class($this), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies() {
		if (!isset($this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices) || empty($this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices)) {
			$this->FLOW3_Aop_Proxy_buildMethodsAndAdvicesArray();
			if (is_callable('parent::FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies')) parent::FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		}	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function FLOW3_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies() {
		if (!$this instanceof \Doctrine\ORM\Proxy\Proxy || isset($this->FLOW3_Proxy_injectProperties_fixInjectedPropertiesForDoctrineProxies)) {
			return;
		}
		$this->FLOW3_Proxy_injectProperties_fixInjectedPropertiesForDoctrineProxies = TRUE;
		if (is_callable(array($this, 'FLOW3_Proxy_injectProperties'))) {
			$this->FLOW3_Proxy_injectProperties();
		}	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function FLOW3_Aop_Proxy_getAdviceChains($methodName) {
		$adviceChains = array();
		if (isset($this->FLOW3_Aop_Proxy_groupedAdviceChains[$methodName])) {
			$adviceChains = $this->FLOW3_Aop_Proxy_groupedAdviceChains[$methodName];
		} else {
			if (isset($this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices[$methodName])) {
				$groupedAdvices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices[$methodName];
				if (isset($groupedAdvices['TYPO3\FLOW3\Aop\Advice\AroundAdvice'])) {
					$this->FLOW3_Aop_Proxy_groupedAdviceChains[$methodName]['TYPO3\FLOW3\Aop\Advice\AroundAdvice'] = new \TYPO3\FLOW3\Aop\Advice\AdviceChain($groupedAdvices['TYPO3\FLOW3\Aop\Advice\AroundAdvice']);
					$adviceChains = $this->FLOW3_Aop_Proxy_groupedAdviceChains[$methodName];
				}
			}
		}
		return $adviceChains;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function FLOW3_Aop_Proxy_invokeJoinPoint(\TYPO3\FLOW3\Aop\JoinPointInterface $joinPoint) {
		if (__CLASS__ !== $joinPoint->getClassName()) return parent::FLOW3_Aop_Proxy_invokeJoinPoint($joinPoint);
		if (isset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode[$joinPoint->getMethodName()])) {
			return call_user_func_array(array('self', $joinPoint->getMethodName()), $joinPoint->getMethodArguments());
		}
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 * @throws \TYPO3\FLOW3\Security\Exception
	 * @throws \TYPO3\FLOW3\Security\Exception\AuthenticationRequiredException
	 */
	 public function authenticate() {

				// FIXME this can be removed again once Doctrine is fixed (see fixMethodsAndAdvicesArrayForDoctrineProxiesCode())
			$this->FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		if (isset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['authenticate'])) {
		$result = parent::authenticate();

		} else {
			$this->FLOW3_Aop_Proxy_methodIsInAdviceMode['authenticate'] = TRUE;
			try {
			
					$methodArguments = array();

		$result = NULL;
		$afterAdviceInvoked = FALSE;
		try {

					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'authenticate', $methodArguments);
					$result = $this->FLOW3_Aop_Proxy_invokeJoinPoint($joinPoint);

					$advices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices['authenticate']['TYPO3\FLOW3\Aop\Advice\AfterAdvice'];
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'authenticate', $joinPoint->getMethodArguments(), NULL, $result);
					$afterAdviceInvoked = TRUE;
					foreach ($advices as $advice) {
						$advice->invoke($joinPoint);
					}

			} catch (\Exception $exception) {

				if (!$afterAdviceInvoked) {
					$advices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices['authenticate']['TYPO3\FLOW3\Aop\Advice\AfterAdvice'];
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'authenticate', $joinPoint->getMethodArguments(), NULL, NULL, $exception);
					foreach ($advices as $advice) {
						$advice->invoke($joinPoint);
					}
				}

				throw $exception;
		}

			} catch(\Exception $e) {
				unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['authenticate']);
				throw $e;
			}
			unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['authenticate']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 */
	 public function logout() {

				// FIXME this can be removed again once Doctrine is fixed (see fixMethodsAndAdvicesArrayForDoctrineProxiesCode())
			$this->FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		if (isset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['logout'])) {
		$result = parent::logout();

		} else {
			$this->FLOW3_Aop_Proxy_methodIsInAdviceMode['logout'] = TRUE;
			try {
			
					$methodArguments = array();

					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'logout', $methodArguments);
					$result = $this->FLOW3_Aop_Proxy_invokeJoinPoint($joinPoint);

					$advices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices['logout']['TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice'];
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'logout', $joinPoint->getMethodArguments(), NULL, $result);
					foreach ($advices as $advice) {
						$advice->invoke($joinPoint);
					}

			} catch(\Exception $e) {
				unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['logout']);
				throw $e;
			}
			unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['logout']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @param TokenInterface $token The token which has been authenticated
	 * @return void
	 * @\TYPO3\FLOW3\Annotations\Signal
	 */
	 protected function emitAuthenticatedToken(\TYPO3\FLOW3\Security\Authentication\TokenInterface $token) {

				// FIXME this can be removed again once Doctrine is fixed (see fixMethodsAndAdvicesArrayForDoctrineProxiesCode())
			$this->FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		if (isset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitAuthenticatedToken'])) {
		$result = parent::emitAuthenticatedToken($token);

		} else {
			$this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitAuthenticatedToken'] = TRUE;
			try {
			
					$methodArguments = array();

				$methodArguments['token'] = $token;
			
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'emitAuthenticatedToken', $methodArguments);
					$result = $this->FLOW3_Aop_Proxy_invokeJoinPoint($joinPoint);

					$advices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices['emitAuthenticatedToken']['TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice'];
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'emitAuthenticatedToken', $joinPoint->getMethodArguments(), NULL, $result);
					foreach ($advices as $advice) {
						$advice->invoke($joinPoint);
					}

			} catch(\Exception $e) {
				unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitAuthenticatedToken']);
				throw $e;
			}
			unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitAuthenticatedToken']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 * @return void
	 * @\TYPO3\FLOW3\Annotations\Signal
	 */
	 protected function emitLoggedOut() {

				// FIXME this can be removed again once Doctrine is fixed (see fixMethodsAndAdvicesArrayForDoctrineProxiesCode())
			$this->FLOW3_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
		if (isset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitLoggedOut'])) {
		$result = parent::emitLoggedOut();

		} else {
			$this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitLoggedOut'] = TRUE;
			try {
			
					$methodArguments = array();

					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'emitLoggedOut', $methodArguments);
					$result = $this->FLOW3_Aop_Proxy_invokeJoinPoint($joinPoint);

					$advices = $this->FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices['emitLoggedOut']['TYPO3\FLOW3\Aop\Advice\AfterReturningAdvice'];
					$joinPoint = new \TYPO3\FLOW3\Aop\JoinPoint($this, 'TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', 'emitLoggedOut', $joinPoint->getMethodArguments(), NULL, $result);
					foreach ($advices as $advice) {
						$advice->invoke($joinPoint);
					}

			} catch(\Exception $e) {
				unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitLoggedOut']);
				throw $e;
			}
			unset($this->FLOW3_Aop_Proxy_methodIsInAdviceMode['emitLoggedOut']);
		}
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->FLOW3_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('FLOW3_Aop_Proxy_targetMethodsAndGroupedAdvices', 'FLOW3_Aop_Proxy_groupedAdviceChains', 'FLOW3_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if ($reflectionService->isPropertyTaggedWith('TYPO3\FLOW3\Security\Authentication\AuthenticationProviderManager', $propertyName, 'transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			foreach ($this->$propertyName as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$className = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
			}
			if ($this->$propertyName instanceof \TYPO3\FLOW3\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'FLOW3_Persistence_RelatedEntities') || !is_array($this->FLOW3_Persistence_RelatedEntities)) {
					$this->FLOW3_Persistence_RelatedEntities = array();
					$this->FLOW3_Object_PropertiesToSerialize[] = 'FLOW3_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\FLOW3\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->FLOW3_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\FLOW3\Object\Configuration\Configuration::SCOPE_SINGLETON) {
				continue;
			}
		}
		$this->FLOW3_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->FLOW3_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\FLOW3\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'FLOW3_Persistence_RelatedEntities') || !is_array($this->FLOW3_Persistence_RelatedEntities)) {
				$this->FLOW3_Persistence_RelatedEntities = array();
				$this->FLOW3_Object_PropertiesToSerialize[] = 'FLOW3_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\FLOW3\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->FLOW3_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\FLOW3\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function FLOW3_Proxy_injectProperties() {
		$this->injectSettings(\TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Configuration\ConfigurationManager')->getConfiguration(\TYPO3\FLOW3\Configuration\ConfigurationManager::CONFIGURATION_TYPE_SETTINGS, 'TYPO3.FLOW3'));
		$this->securityLogger = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Log\SecurityLoggerInterface');
		$this->session = \TYPO3\FLOW3\Core\Bootstrap::$staticObjectManager->get('TYPO3\FLOW3\Session\SessionInterface');
	}
}
#